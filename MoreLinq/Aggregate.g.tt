<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2017 Atif Aziz. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

#if !NO_OBSERVABLES

namespace MoreLinq
{
    using System;
    using System.Collections.Generic;

    partial class MoreEnumerable
    {
<#
    var ordinals = new[]
    {
        "zeroth",
        "first", "second", "third", "fourth", "fifth", "sixth", "seventh",
        "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth",
        "fourteenth", "fifteenth", "sixteenth"
    };

    foreach (var n in Enumerable.Range(2, 16 - 2))
    {
        string T(string s, int x) => s + x.ToString(CultureInfo.InvariantCulture);
        var ns = Enumerable.Range(1, n).ToArray();
#>
        /// <summary>
        /// Applies <#= T(null, n) #> accumulators over a sequence.
        /// </summary>
        /// <typeparam name="TSource">
        /// The type of the elements of <paramref name="source"/>.</typeparam>
<#      foreach (var m in ns)
        { #>
        /// <typeparam name="<#= T("TResult", m) #>">The type of the <#= ordinals[m] #> accumulator value.</typeparam>
<#      } #>
        /// <typeparam name="TResult">The type of the resulting value.</typeparam>
        /// <param name="source">The sequence to aggregate over.</param>
<#      foreach (var m in ns)
        { #>
        /// <param name="<#= T("aggregatorConnector", m) #>">
        /// The <#= ordinals[m] #> function that connects an accumulator to the source.</param>
<#      } #>
        /// <param name="resultSelector">
        /// A function to transform the final accumulator value into the result value.</param>
        /// <returns>The transformed final accumulator value.</returns>
        /// <remarks>This method uses immediate execution semantics.</remarks>

        public static TResult Aggregate<TSource, <#= string.Join(", ", from m in ns select T("TResult", m)) #>, TResult>(
            this IEnumerable<TSource> source,
<#      foreach (var m in ns)
        { #>
            Func<IObservable<TSource>, Func<<#= T("TResult", m) #>>> <#= T("aggregatorConnector", m) #>,
<#      } #>
            Func<<#= string.Join(", ", from m in ns select T("TResult", m)) #>, TResult> resultSelector)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
<#      foreach (var m in ns)
        { #>
            if (<#= T("aggregatorConnector", m) #> == null) throw new ArgumentNullException(nameof(<#= T("aggregatorConnector", m) #>));
<#      } #>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

<#      foreach (var m in ns)
        { #>
            var <#= T("s", m) #> = new Subject<TSource>(); var <#= T("c", m) #> = <#= T("aggregatorConnector", m) #>(<#= T("s", m) #>);
<#      } #>

            // TODO OnError

            foreach (var item in source)
            {
<#      foreach (var m in ns)
        { #>
                <#= T("s", m) #>.OnNext(item);
<#      } #>
            }

<#      foreach (var m in ns)
        { #>
            <#= T("s", m) #>.OnCompleted();
<#      } #>

            return resultSelector(<#= string.Join(", ", from m in ns select T("c", m) + "()") #>);
        }

<#  } #>
    }
}

#endif // !NO_OBSERVABLES
