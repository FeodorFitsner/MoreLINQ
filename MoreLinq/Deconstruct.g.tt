<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2013 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

namespace MoreLinq
{
    using System;

    partial struct DeconstructibleEnumerable<T>
    {<#
        var ordinalNumbers = new[]
        {
            "first",
            "second",
            "third",
            "fourth",
            "fifth",
            "sixth",
            "seventh",
            "eighth",
            "ninth",
            "tenth",
            "eleventh",
            "twelfth",
            "thirteenth",
            "fourteenth",
            "fifteenth",
            "sixteenth",
        };

        var overloads =
            from i in Enumerable.Range(2, 15)
            let istr = i.ToString(CultureInfo.InvariantCulture)
            select new
            {
                Count         = i,
                CountElements = istr + " " + (i == 1 ? "element" : "elements"),
                CountArg      = istr,
            };

        foreach (var e in overloads) { #>

        /// <summary>
        /// Deconstructs exactly <#= e.CountArg #> elements into separate variables.
        /// </summary>
<#          foreach (var i in Enumerable.Range(0, e.Count)) { #>
        /// <param name="item<#= (i + 1).ToString(CultureInfo.InvariantCulture) #>">The value of the <#= ordinalNumbers[i] #> element.</param>
<#          } #>
        /// <exception cref="InvalidOperationException">
        /// The source sequence either has too few or too many elements
        /// than being deconstructed.
        /// </exception>

        public void Deconstruct(<#= string.Join(", ", from i in Enumerable.Range(1, e.Count) select "out T item" + i.ToString(CultureInfo.InvariantCulture))#>)
        {
            const int count = <#= e.CountArg #>;

            using (var e = GetEnumerator())
            {
<#          foreach (var i in Enumerable.Range(1, e.Count)) { #>
                item<#= i.ToString(CultureInfo.InvariantCulture) #> = e.MoveNext() ? e.Current : throw CreateTooShortError(count);
<#          } #>
                if (e.MoveNext())
                    throw CreateTooLongError(count);
            }
        }
<#      } #>
    }
}
